//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Generated by EntityQueryBuilder.tt (129 `foreach` combinations)

using System;
using System.ComponentModel;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Jobs;

namespace Unity.Entities
{
    public partial struct EntityQueryBuilder
    {
        public delegate void F_E(Entity entity);

        public unsafe void ForEach(F_E action)
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    query = ResolveEntityQuery(null, 0);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i]);
                    }
                }
            }
        }

        public delegate void F_ED<T0>(Entity entity, ref T0 d0)
            where T0 : struct, IComponentData;

        public unsafe void ForEach<T0>(F_ED<T0> action)
            where T0 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 1);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i));
                    }
                }
            }
        }

        public delegate void F_D<T0>(ref T0 d0)
            where T0 : struct, IComponentData;

        public unsafe void ForEach<T0>(F_D<T0> action)
            where T0 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 1);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i));
                    }
                }
            }
        }

        public delegate void F_EC<T0>(Entity entity, T0 c0)
            where T0 : class;

        public unsafe void ForEach<T0>(F_EC<T0> action)
            where T0 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 1);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i]);
                    }
                }
            }
        }

        public delegate void F_C<T0>(T0 c0)
            where T0 : class;

        public unsafe void ForEach<T0>(F_C<T0> action)
            where T0 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 1);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i]);
                    }
                }
            }
        }

        public delegate void F_EB<T0>(Entity entity, DynamicBuffer<T0> b0)
            where T0 : struct, IBufferElementData;

        public unsafe void ForEach<T0>(F_EB<T0> action)
            where T0 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 1);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i]);
                    }
                }
            }
        }

        public delegate void F_B<T0>(DynamicBuffer<T0> b0)
            where T0 : struct, IBufferElementData;

        public unsafe void ForEach<T0>(F_B<T0> action)
            where T0 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 1);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i]);
                    }
                }
            }
        }

        public delegate void F_ES<T0>(Entity entity, T0 s0)
            where T0 : struct, ISharedComponentData;

        public unsafe void ForEach<T0>(F_ES<T0> action)
            where T0 : struct, ISharedComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 1);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0);
                    }
                }
            }
        }

        public delegate void F_S<T0>(T0 s0)
            where T0 : struct, ISharedComponentData;

        public unsafe void ForEach<T0>(F_S<T0> action)
            where T0 : struct, ISharedComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 1);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0);
                    }
                }
            }
        }

        public delegate void F_EDD<T0, T1>(Entity entity, ref T0 d0, ref T1 d1)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_EDD<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_DD<T0, T1>(ref T0 d0, ref T1 d1)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_DD<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_EDDD<T0, T1, T2>(Entity entity, ref T0 d0, ref T1 d1, ref T2 d2)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_EDDD<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_DDD<T0, T1, T2>(ref T0 d0, ref T1 d1, ref T2 d2)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_DDD<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_EDDDD<T0, T1, T2, T3>(Entity entity, ref T0 d0, ref T1 d1, ref T2 d2, ref T3 d3)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EDDDD<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_DDDD<T0, T1, T2, T3>(ref T0 d0, ref T1 d1, ref T2 d2, ref T3 d3)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_DDDD<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_EDDDDD<T0, T1, T2, T3, T4>(Entity entity, ref T0 d0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EDDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_DDDDD<T0, T1, T2, T3, T4>(ref T0 d0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_DDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_EDDDDDD<T0, T1, T2, T3, T4, T5>(Entity entity, ref T0 d0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4, ref T5 d5)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EDDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_DDDDDD<T0, T1, T2, T3, T4, T5>(ref T0 d0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4, ref T5 d5)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_DDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_ECD<T0, T1>(Entity entity, T0 c0, ref T1 d1)
            where T0 : class
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_ECD<T0, T1> action)
            where T0 : class
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_CD<T0, T1>(T0 c0, ref T1 d1)
            where T0 : class
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_CD<T0, T1> action)
            where T0 : class
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_ECDD<T0, T1, T2>(Entity entity, T0 c0, ref T1 d1, ref T2 d2)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_ECDD<T0, T1, T2> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_CDD<T0, T1, T2>(T0 c0, ref T1 d1, ref T2 d2)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_CDD<T0, T1, T2> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_ECDDD<T0, T1, T2, T3>(Entity entity, T0 c0, ref T1 d1, ref T2 d2, ref T3 d3)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ECDDD<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_CDDD<T0, T1, T2, T3>(T0 c0, ref T1 d1, ref T2 d2, ref T3 d3)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_CDDD<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_ECDDDD<T0, T1, T2, T3, T4>(Entity entity, T0 c0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ECDDDD<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_CDDDD<T0, T1, T2, T3, T4>(T0 c0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_CDDDD<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_ECDDDDD<T0, T1, T2, T3, T4, T5>(Entity entity, T0 c0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4, ref T5 d5)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ECDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_CDDDDD<T0, T1, T2, T3, T4, T5>(T0 c0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4, ref T5 d5)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_CDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_EBD<T0, T1>(Entity entity, DynamicBuffer<T0> b0, ref T1 d1)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_EBD<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_BD<T0, T1>(DynamicBuffer<T0> b0, ref T1 d1)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_BD<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_EBDD<T0, T1, T2>(Entity entity, DynamicBuffer<T0> b0, ref T1 d1, ref T2 d2)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_EBDD<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_BDD<T0, T1, T2>(DynamicBuffer<T0> b0, ref T1 d1, ref T2 d2)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_BDD<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_EBDDD<T0, T1, T2, T3>(Entity entity, DynamicBuffer<T0> b0, ref T1 d1, ref T2 d2, ref T3 d3)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EBDDD<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_BDDD<T0, T1, T2, T3>(DynamicBuffer<T0> b0, ref T1 d1, ref T2 d2, ref T3 d3)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_BDDD<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_EBDDDD<T0, T1, T2, T3, T4>(Entity entity, DynamicBuffer<T0> b0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EBDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_BDDDD<T0, T1, T2, T3, T4>(DynamicBuffer<T0> b0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_BDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_EBDDDDD<T0, T1, T2, T3, T4, T5>(Entity entity, DynamicBuffer<T0> b0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4, ref T5 d5)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EBDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_BDDDDD<T0, T1, T2, T3, T4, T5>(DynamicBuffer<T0> b0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4, ref T5 d5)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_BDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_ESD<T0, T1>(Entity entity, T0 s0, ref T1 d1)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_ESD<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_SD<T0, T1>(T0 s0, ref T1 d1)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData;

        public unsafe void ForEach<T0, T1>(F_SD<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                    }
                }
            }
        }

        public delegate void F_ESDD<T0, T1, T2>(Entity entity, T0 s0, ref T1 d1, ref T2 d2)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_ESDD<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_SDD<T0, T1, T2>(T0 s0, ref T1 d1, ref T2 d2)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2>(F_SDD<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                    }
                }
            }
        }

        public delegate void F_ESDDD<T0, T1, T2, T3>(Entity entity, T0 s0, ref T1 d1, ref T2 d2, ref T3 d3)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ESDDD<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_SDDD<T0, T1, T2, T3>(T0 s0, ref T1 d1, ref T2 d2, ref T3 d3)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_SDDD<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                    }
                }
            }
        }

        public delegate void F_ESDDDD<T0, T1, T2, T3, T4>(Entity entity, T0 s0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ESDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_SDDDD<T0, T1, T2, T3, T4>(T0 s0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_SDDDD<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                    }
                }
            }
        }

        public delegate void F_ESDDDDD<T0, T1, T2, T3, T4, T5>(Entity entity, T0 s0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4, ref T5 d5)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ESDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_SDDDDD<T0, T1, T2, T3, T4, T5>(T0 s0, ref T1 d1, ref T2 d2, ref T3 d3, ref T4 d4, ref T5 d5)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_SDDDDD<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                        var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                        var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                        var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                        var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                    }
                }
            }
        }

        public delegate void F_EDC<T0, T1>(Entity entity, ref T0 d0, T1 c1)
            where T0 : struct, IComponentData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_EDC<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i]);
                    }
                }
            }
        }

        public delegate void F_DC<T0, T1>(ref T0 d0, T1 c1)
            where T0 : struct, IComponentData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_DC<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i]);
                    }
                }
            }
        }

        public delegate void F_EDCC<T0, T1, T2>(Entity entity, ref T0 d0, T1 c1, T2 c2)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_EDCC<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_DCC<T0, T1, T2>(ref T0 d0, T1 c1, T2 c2)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_DCC<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_EDCCC<T0, T1, T2, T3>(Entity entity, ref T0 d0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EDCCC<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_DCCC<T0, T1, T2, T3>(ref T0 d0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_DCCC<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_EDCCCC<T0, T1, T2, T3, T4>(Entity entity, ref T0 d0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EDCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_DCCCC<T0, T1, T2, T3, T4>(ref T0 d0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_DCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_EDCCCCC<T0, T1, T2, T3, T4, T5>(Entity entity, ref T0 d0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EDCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_DCCCCC<T0, T1, T2, T3, T4, T5>(ref T0 d0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_DCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_ECC<T0, T1>(Entity entity, T0 c0, T1 c1)
            where T0 : class
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_ECC<T0, T1> action)
            where T0 : class
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_CC<T0, T1>(T0 c0, T1 c1)
            where T0 : class
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_CC<T0, T1> action)
            where T0 : class
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_ECCC<T0, T1, T2>(Entity entity, T0 c0, T1 c1, T2 c2)
            where T0 : class
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_ECCC<T0, T1, T2> action)
            where T0 : class
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_CCC<T0, T1, T2>(T0 c0, T1 c1, T2 c2)
            where T0 : class
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_CCC<T0, T1, T2> action)
            where T0 : class
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_ECCCC<T0, T1, T2, T3>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ECCCC<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_CCCC<T0, T1, T2, T3>(T0 c0, T1 c1, T2 c2, T3 c3)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_CCCC<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_ECCCCC<T0, T1, T2, T3, T4>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ECCCCC<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_CCCCC<T0, T1, T2, T3, T4>(T0 c0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_CCCCC<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_ECCCCCC<T0, T1, T2, T3, T4, T5>(Entity entity, T0 c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ECCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_CCCCCC<T0, T1, T2, T3, T4, T5>(T0 c0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_CCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_EBC<T0, T1>(Entity entity, DynamicBuffer<T0> b0, T1 c1)
            where T0 : struct, IBufferElementData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_EBC<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_BC<T0, T1>(DynamicBuffer<T0> b0, T1 c1)
            where T0 : struct, IBufferElementData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_BC<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_EBCC<T0, T1, T2>(Entity entity, DynamicBuffer<T0> b0, T1 c1, T2 c2)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_EBCC<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_BCC<T0, T1, T2>(DynamicBuffer<T0> b0, T1 c1, T2 c2)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_BCC<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_EBCCC<T0, T1, T2, T3>(Entity entity, DynamicBuffer<T0> b0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EBCCC<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_BCCC<T0, T1, T2, T3>(DynamicBuffer<T0> b0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_BCCC<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_EBCCCC<T0, T1, T2, T3, T4>(Entity entity, DynamicBuffer<T0> b0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EBCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_BCCCC<T0, T1, T2, T3, T4>(DynamicBuffer<T0> b0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_BCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_EBCCCCC<T0, T1, T2, T3, T4, T5>(Entity entity, DynamicBuffer<T0> b0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EBCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_BCCCCC<T0, T1, T2, T3, T4, T5>(DynamicBuffer<T0> b0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_BCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_ESC<T0, T1>(Entity entity, T0 s0, T1 c1)
            where T0 : struct, ISharedComponentData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_ESC<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i]);
                    }
                }
            }
        }

        public delegate void F_SC<T0, T1>(T0 s0, T1 c1)
            where T0 : struct, ISharedComponentData
            where T1 : class;

        public unsafe void ForEach<T0, T1>(F_SC<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i]);
                    }
                }
            }
        }

        public delegate void F_ESCC<T0, T1, T2>(Entity entity, T0 s0, T1 c1, T2 c2)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_ESCC<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_SCC<T0, T1, T2>(T0 s0, T1 c1, T2 c2)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class;

        public unsafe void ForEach<T0, T1, T2>(F_SCC<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_ESCCC<T0, T1, T2, T3>(Entity entity, T0 s0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ESCCC<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_SCCC<T0, T1, T2, T3>(T0 s0, T1 c1, T2 c2, T3 c3)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class;

        public unsafe void ForEach<T0, T1, T2, T3>(F_SCCC<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_ESCCCC<T0, T1, T2, T3, T4>(Entity entity, T0 s0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ESCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_SCCCC<T0, T1, T2, T3, T4>(T0 s0, T1 c1, T2 c2, T3 c3, T4 c4)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_SCCCC<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_ESCCCCC<T0, T1, T2, T3, T4, T5>(Entity entity, T0 s0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ESCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_SCCCCC<T0, T1, T2, T3, T4, T5>(T0 s0, T1 c1, T2 c2, T3 c3, T4 c4, T5 c5)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_SCCCCC<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkComponentType<T1>();
                var chunkComponentType2 = m_System.GetArchetypeChunkComponentType<T2>();
                var chunkComponentType3 = m_System.GetArchetypeChunkComponentType<T3>();
                var chunkComponentType4 = m_System.GetArchetypeChunkComponentType<T4>();
                var chunkComponentType5 = m_System.GetArchetypeChunkComponentType<T5>();

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetComponentObjects(chunkComponentType1, m_System.EntityManager);
                        var array2 = chunk.GetComponentObjects(chunkComponentType2, m_System.EntityManager);
                        var array3 = chunk.GetComponentObjects(chunkComponentType3, m_System.EntityManager);
                        var array4 = chunk.GetComponentObjects(chunkComponentType4, m_System.EntityManager);
                        var array5 = chunk.GetComponentObjects(chunkComponentType5, m_System.EntityManager);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_EDB<T0, T1>(Entity entity, ref T0 d0, DynamicBuffer<T1> b1)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1>(F_EDB<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i]);
                    }
                }
            }
        }

        public delegate void F_DB<T0, T1>(ref T0 d0, DynamicBuffer<T1> b1)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1>(F_DB<T0, T1> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i]);
                    }
                }
            }
        }

        public delegate void F_EDBB<T0, T1, T2>(Entity entity, ref T0 d0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2>(F_EDBB<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_DBB<T0, T1, T2>(ref T0 d0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2>(F_DBB<T0, T1, T2> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_EDBBB<T0, T1, T2, T3>(Entity entity, ref T0 d0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EDBBB<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_DBBB<T0, T1, T2, T3>(ref T0 d0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_DBBB<T0, T1, T2, T3> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_EDBBBB<T0, T1, T2, T3, T4>(Entity entity, ref T0 d0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EDBBBB<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_DBBBB<T0, T1, T2, T3, T4>(ref T0 d0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_DBBBB<T0, T1, T2, T3, T4> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_EDBBBBB<T0, T1, T2, T3, T4, T5>(Entity entity, ref T0 d0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4, DynamicBuffer<T5> b5)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EDBBBBB<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkBufferType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var array5 = chunk.GetBufferAccessor(chunkComponentType5);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_DBBBBB<T0, T1, T2, T3, T4, T5>(ref T0 d0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4, DynamicBuffer<T5> b5)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_DBBBBB<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkBufferType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var array5 = chunk.GetBufferAccessor(chunkComponentType5);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_ECB<T0, T1>(Entity entity, T0 c0, DynamicBuffer<T1> b1)
            where T0 : class
            where T1 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1>(F_ECB<T0, T1> action)
            where T0 : class
            where T1 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_CB<T0, T1>(T0 c0, DynamicBuffer<T1> b1)
            where T0 : class
            where T1 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1>(F_CB<T0, T1> action)
            where T0 : class
            where T1 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_ECBB<T0, T1, T2>(Entity entity, T0 c0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2>(F_ECBB<T0, T1, T2> action)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_CBB<T0, T1, T2>(T0 c0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2>(F_CBB<T0, T1, T2> action)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_ECBBB<T0, T1, T2, T3>(Entity entity, T0 c0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ECBBB<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_CBBB<T0, T1, T2, T3>(T0 c0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_CBBB<T0, T1, T2, T3> action)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_ECBBBB<T0, T1, T2, T3, T4>(Entity entity, T0 c0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ECBBBB<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_CBBBB<T0, T1, T2, T3, T4>(T0 c0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_CBBBB<T0, T1, T2, T3, T4> action)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_ECBBBBB<T0, T1, T2, T3, T4, T5>(Entity entity, T0 c0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4, DynamicBuffer<T5> b5)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ECBBBBB<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkBufferType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var array5 = chunk.GetBufferAccessor(chunkComponentType5);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_CBBBBB<T0, T1, T2, T3, T4, T5>(T0 c0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4, DynamicBuffer<T5> b5)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_CBBBBB<T0, T1, T2, T3, T4, T5> action)
            where T0 : class
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkBufferType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetComponentObjects(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var array5 = chunk.GetBufferAccessor(chunkComponentType5);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_EBB<T0, T1>(Entity entity, DynamicBuffer<T0> b0, DynamicBuffer<T1> b1)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1>(F_EBB<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_BB<T0, T1>(DynamicBuffer<T0> b0, DynamicBuffer<T1> b1)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1>(F_BB<T0, T1> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i]);
                    }
                }
            }
        }

        public delegate void F_EBBB<T0, T1, T2>(Entity entity, DynamicBuffer<T0> b0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2>(F_EBBB<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_BBB<T0, T1, T2>(DynamicBuffer<T0> b0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2>(F_BBB<T0, T1, T2> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_EBBBB<T0, T1, T2, T3>(Entity entity, DynamicBuffer<T0> b0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_EBBBB<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_BBBB<T0, T1, T2, T3>(DynamicBuffer<T0> b0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_BBBB<T0, T1, T2, T3> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_EBBBBB<T0, T1, T2, T3, T4>(Entity entity, DynamicBuffer<T0> b0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_EBBBBB<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_BBBBB<T0, T1, T2, T3, T4>(DynamicBuffer<T0> b0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_BBBBB<T0, T1, T2, T3, T4> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_EBBBBBB<T0, T1, T2, T3, T4, T5>(Entity entity, DynamicBuffer<T0> b0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4, DynamicBuffer<T5> b5)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_EBBBBBB<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkBufferType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var array5 = chunk.GetBufferAccessor(chunkComponentType5);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_BBBBBB<T0, T1, T2, T3, T4, T5>(DynamicBuffer<T0> b0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4, DynamicBuffer<T5> b5)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_BBBBBB<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, IBufferElementData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkBufferType<T0>(false);
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkBufferType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetBufferAccessor(chunkComponentType0);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var array5 = chunk.GetBufferAccessor(chunkComponentType5);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0[i], array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_ESB<T0, T1>(Entity entity, T0 s0, DynamicBuffer<T1> b1)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1>(F_ESB<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i]);
                    }
                }
            }
        }

        public delegate void F_SB<T0, T1>(T0 s0, DynamicBuffer<T1> b1)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1>(F_SB<T0, T1> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 2);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i]);
                    }
                }
            }
        }

        public delegate void F_ESBB<T0, T1, T2>(Entity entity, T0 s0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2>(F_ESBB<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_SBB<T0, T1, T2>(T0 s0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2>(F_SBB<T0, T1, T2> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 3);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i]);
                    }
                }
            }
        }

        public delegate void F_ESBBB<T0, T1, T2, T3>(Entity entity, T0 s0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_ESBBB<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_SBBB<T0, T1, T2, T3>(T0 s0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3>(F_SBBB<T0, T1, T2, T3> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 4);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i]);
                    }
                }
            }
        }

        public delegate void F_ESBBBB<T0, T1, T2, T3, T4>(Entity entity, T0 s0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_ESBBBB<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_SBBBB<T0, T1, T2, T3, T4>(T0 s0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4>(F_SBBBB<T0, T1, T2, T3, T4> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 5);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i], array4[i]);
                    }
                }
            }
        }

        public delegate void F_ESBBBBB<T0, T1, T2, T3, T4, T5>(Entity entity, T0 s0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4, DynamicBuffer<T5> b5)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_ESBBBBB<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var entityType = m_System.GetArchetypeChunkEntityType();
                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkBufferType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var array5 = chunk.GetBufferAccessor(chunkComponentType5);
                        var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(entityArray[i], array0, array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

        public delegate void F_SBBBBB<T0, T1, T2, T3, T4, T5>(T0 s0, DynamicBuffer<T1> b1, DynamicBuffer<T2> b2, DynamicBuffer<T3> b3, DynamicBuffer<T4> b4, DynamicBuffer<T5> b5)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData;

        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(F_SBBBBB<T0, T1, T2, T3, T4, T5> action)
            where T0 : struct, ISharedComponentData
            where T1 : struct, IBufferElementData
            where T2 : struct, IBufferElementData
            where T3 : struct, IBufferElementData
            where T4 : struct, IBufferElementData
            where T5 : struct, IBufferElementData
        {
            #if ENABLE_UNITY_COLLECTIONS_CHECKS
            using (InsideForEach())
            #endif
            {
                var query = m_Query;
                if (query == null)
                {
                    var delegateTypes = stackalloc[]
                    {
                        TypeManager.GetTypeIndex<T0>(),
                        TypeManager.GetTypeIndex<T1>(),
                        TypeManager.GetTypeIndex<T2>(),
                        TypeManager.GetTypeIndex<T3>(),
                        TypeManager.GetTypeIndex<T4>(),
                        TypeManager.GetTypeIndex<T5>(),
                    };

                    query = ResolveEntityQuery(delegateTypes, 6);
                }

                var chunkComponentType0 = m_System.GetArchetypeChunkSharedComponentType<T0>();
                var chunkComponentType1 = m_System.GetArchetypeChunkBufferType<T1>(false);
                var chunkComponentType2 = m_System.GetArchetypeChunkBufferType<T2>(false);
                var chunkComponentType3 = m_System.GetArchetypeChunkBufferType<T3>(false);
                var chunkComponentType4 = m_System.GetArchetypeChunkBufferType<T4>(false);
                var chunkComponentType5 = m_System.GetArchetypeChunkBufferType<T5>(false);

                using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
                {
                    foreach (var chunk in chunks)
                    {
                        var array0 = chunk.GetSharedComponentData(chunkComponentType0, m_System.EntityManager);
                        var array1 = chunk.GetBufferAccessor(chunkComponentType1);
                        var array2 = chunk.GetBufferAccessor(chunkComponentType2);
                        var array3 = chunk.GetBufferAccessor(chunkComponentType3);
                        var array4 = chunk.GetBufferAccessor(chunkComponentType4);
                        var array5 = chunk.GetBufferAccessor(chunkComponentType5);

                        for (int i = 0, count = chunk.Count; i < count; ++i)
                            action(array0, array1[i], array2[i], array3[i], array4[i], array5[i]);
                    }
                }
            }
        }

    }

    // Schedule() implementation for DOTS-standalone.
    // The IDE calls Schedule(), and then code-gen is used to
    // replace the call to the correct Schedule_D method, With
    // known types.

#if UNITY_DOTSPLAYER
    public static partial class JobForEachExtensions
    {
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_D<TJob, T0>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0>
            where T0 : struct, IComponentData
        {
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rD<TJob, T0>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0>
            where T0 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[1]
                {
                    ComponentType.ReadOnly<T0>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 1);
                Execute_D<TJob, T0>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wD<TJob, T0>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0>
            where T0 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[1]
                {
                    ComponentType.ReadWrite<T0>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 1);
                Execute_D<TJob, T0>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_ED<TJob, T0>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0>
            where T0 : struct, IComponentData
        {
            var entityType = system.GetArchetypeChunkEntityType();
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(entityArray[i], entityArray[i].Index, ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErD<TJob, T0>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0>
            where T0 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[1]
                {
                    ComponentType.ReadOnly<T0>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 1);
                Execute_ED<TJob, T0>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwD<TJob, T0>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0>
            where T0 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[1]
                {
                    ComponentType.ReadWrite<T0>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 1);
                Execute_ED<TJob, T0>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_DD<TJob, T0, T1>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrD<TJob, T0, T1>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[2]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 2);
                Execute_DD<TJob, T0, T1>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrD<TJob, T0, T1>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[2]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 2);
                Execute_DD<TJob, T0, T1>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwD<TJob, T0, T1>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[2]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 2);
                Execute_DD<TJob, T0, T1>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwD<TJob, T0, T1>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[2]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 2);
                Execute_DD<TJob, T0, T1>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_EDD<TJob, T0, T1>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            var entityType = system.GetArchetypeChunkEntityType();
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(entityArray[i], entityArray[i].Index, ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrD<TJob, T0, T1>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[2]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 2);
                Execute_EDD<TJob, T0, T1>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrD<TJob, T0, T1>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[2]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 2);
                Execute_EDD<TJob, T0, T1>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwD<TJob, T0, T1>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[2]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 2);
                Execute_EDD<TJob, T0, T1>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwD<TJob, T0, T1>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[2]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 2);
                Execute_EDD<TJob, T0, T1>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_DDD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);
            var chunkComponentType2 = system.GetArchetypeChunkComponentType<T2>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_DDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_DDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_DDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_DDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_DDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_DDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_DDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_DDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_EDDD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            var entityType = system.GetArchetypeChunkEntityType();
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);
            var chunkComponentType2 = system.GetArchetypeChunkComponentType<T2>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                    var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(entityArray[i], entityArray[i].Index, ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_EDDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_EDDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_EDDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_EDDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_EDDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_EDDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_EDDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwD<TJob, T0, T1, T2>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[3]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 3);
                Execute_EDDD<TJob, T0, T1, T2>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_DDDD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);
            var chunkComponentType2 = system.GetArchetypeChunkComponentType<T2>(false);
            var chunkComponentType3 = system.GetArchetypeChunkComponentType<T3>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                    var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_DDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_EDDDD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            var entityType = system.GetArchetypeChunkEntityType();
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);
            var chunkComponentType2 = system.GetArchetypeChunkComponentType<T2>(false);
            var chunkComponentType3 = system.GetArchetypeChunkComponentType<T3>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                    var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                    var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(entityArray[i], entityArray[i].Index, ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDrD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDwD<TJob, T0, T1, T2, T3>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[4]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 4);
                Execute_EDDDD<TJob, T0, T1, T2, T3>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);
            var chunkComponentType2 = system.GetArchetypeChunkComponentType<T2>(false);
            var chunkComponentType3 = system.GetArchetypeChunkComponentType<T3>(false);
            var chunkComponentType4 = system.GetArchetypeChunkComponentType<T4>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                    var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                    var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_DDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            var entityType = system.GetArchetypeChunkEntityType();
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);
            var chunkComponentType2 = system.GetArchetypeChunkComponentType<T2>(false);
            var chunkComponentType3 = system.GetArchetypeChunkComponentType<T3>(false);
            var chunkComponentType4 = system.GetArchetypeChunkComponentType<T4>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                    var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                    var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                    var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(entityArray[i], entityArray[i].Index, ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDrDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDwDrD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDrDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDwDwD<TJob, T0, T1, T2, T3, T4>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[5]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 5);
                Execute_EDDDDD<TJob, T0, T1, T2, T3, T4>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);
            var chunkComponentType2 = system.GetArchetypeChunkComponentType<T2>(false);
            var chunkComponentType3 = system.GetArchetypeChunkComponentType<T3>(false);
            var chunkComponentType4 = system.GetArchetypeChunkComponentType<T4>(false);
            var chunkComponentType5 = system.GetArchetypeChunkComponentType<T5>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                    var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                    var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                    var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDrDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDrDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDrDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDrDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDrDwDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDrDwDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_rDwDwDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_wDwDwDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEach<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_DDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static void Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, EntityQuery query, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            var entityType = system.GetArchetypeChunkEntityType();
            var chunkComponentType0 = system.GetArchetypeChunkComponentType<T0>(false);
            var chunkComponentType1 = system.GetArchetypeChunkComponentType<T1>(false);
            var chunkComponentType2 = system.GetArchetypeChunkComponentType<T2>(false);
            var chunkComponentType3 = system.GetArchetypeChunkComponentType<T3>(false);
            var chunkComponentType4 = system.GetArchetypeChunkComponentType<T4>(false);
            var chunkComponentType5 = system.GetArchetypeChunkComponentType<T5>(false);

            using (var chunks = query.CreateArchetypeChunkArray(Allocator.TempJob))
            {
                foreach (var chunk in chunks)
                {
                    var array0 = chunk.GetNativeArray(chunkComponentType0).GetUnsafePtr();
                    var array1 = chunk.GetNativeArray(chunkComponentType1).GetUnsafePtr();
                    var array2 = chunk.GetNativeArray(chunkComponentType2).GetUnsafePtr();
                    var array3 = chunk.GetNativeArray(chunkComponentType3).GetUnsafePtr();
                    var array4 = chunk.GetNativeArray(chunkComponentType4).GetUnsafePtr();
                    var array5 = chunk.GetNativeArray(chunkComponentType5).GetUnsafePtr();
                    var entityArray = (Entity*)chunk.GetNativeArray(entityType).GetUnsafeReadOnlyPtr();

                    for (int i = 0, count = chunk.Count; i < count; ++i)
                        job.Execute(entityArray[i], entityArray[i].Index, ref UnsafeUtilityEx.ArrayElementAsRef<T0>(array0, i), ref UnsafeUtilityEx.ArrayElementAsRef<T1>(array1, i), ref UnsafeUtilityEx.ArrayElementAsRef<T2>(array2, i), ref UnsafeUtilityEx.ArrayElementAsRef<T3>(array3, i), ref UnsafeUtilityEx.ArrayElementAsRef<T4>(array4, i), ref UnsafeUtilityEx.ArrayElementAsRef<T5>(array5, i));
                }
            }
            DoDeallocateOnJobCompletion(job);
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDrDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDwDrDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDrDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDwDwDrD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadOnly<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDrDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDwDrDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadOnly<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDrDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadOnly<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDrDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDrDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDrDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDrDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadOnly<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDrDwDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDrDwDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadOnly<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_ErDwDwDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadOnly<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal unsafe static JobHandle Schedule_EwDwDwDwDwDwD<TJob, T0, T1, T2, T3, T4, T5>(TJob job, ComponentSystemBase system, JobHandle dependsOn = default(JobHandle))
            where TJob : struct, IJobForEachWithEntity<T0, T1, T2, T3, T4, T5>
            where T0 : struct, IComponentData
            where T1 : struct, IComponentData
            where T2 : struct, IComponentData
            where T3 : struct, IComponentData
            where T4 : struct, IComponentData
            where T5 : struct, IComponentData
        {
            {
                var delegateTypes = stackalloc ComponentType[6]
                {
                    ComponentType.ReadWrite<T0>(),
                    ComponentType.ReadWrite<T1>(),
                    ComponentType.ReadWrite<T2>(),
                    ComponentType.ReadWrite<T3>(),
                    ComponentType.ReadWrite<T4>(),
                    ComponentType.ReadWrite<T5>(),
                };
                EntityQuery query = /*ResolveEntityQuery*/system.GetEntityQueryInternal(delegateTypes, 6);
                Execute_EDDDDDD<TJob, T0, T1, T2, T3, T4, T5>(job, system, query, dependsOn);
            }
            return new JobHandle();
        }
        
    }
#endif // UNITY_DOTSPLAYER

    // BACK-COMPAT

    public partial class ComponentSystem
    {
        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach(EntityQueryBuilder.F_E action, EntityQuery query = null)
            
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_ED<T0> action, EntityQuery query = null)
            where T0 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_D<T0> action, EntityQuery query = null)
            where T0 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_EC<T0> action, EntityQuery query = null)
            where T0 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_C<T0> action, EntityQuery query = null)
            where T0 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_EB<T0> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_B<T0> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_ES<T0> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0>(EntityQueryBuilder.F_S<T0> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EDD<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_DD<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EDDD<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_DDD<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EDDDD<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_DDDD<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EDDDDD<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_DDDDD<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EDDDDDD<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_DDDDDD<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ECD<T0, T1> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_CD<T0, T1> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ECDD<T0, T1, T2> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_CDD<T0, T1, T2> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ECDDD<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_CDDD<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ECDDDD<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_CDDDD<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ECDDDDD<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_CDDDDD<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EBD<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_BD<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EBDD<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_BDD<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EBDDD<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_BDDD<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EBDDDD<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_BDDDD<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EBDDDDD<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_BDDDDD<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ESD<T0, T1> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_SD<T0, T1> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ESDD<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_SDD<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ESDDD<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_SDDD<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ESDDDD<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_SDDDD<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ESDDDDD<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_SDDDDD<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IComponentData where T2 : struct, IComponentData where T3 : struct, IComponentData where T4 : struct, IComponentData where T5 : struct, IComponentData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EDC<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_DC<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EDCC<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class where T2 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_DCC<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class where T2 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EDCCC<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_DCCC<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EDCCCC<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class where T4 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_DCCCC<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class where T4 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EDCCCCC<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_DCCCCC<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ECC<T0, T1> action, EntityQuery query = null)
            where T0 : class where T1 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_CC<T0, T1> action, EntityQuery query = null)
            where T0 : class where T1 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ECCC<T0, T1, T2> action, EntityQuery query = null)
            where T0 : class where T1 : class where T2 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_CCC<T0, T1, T2> action, EntityQuery query = null)
            where T0 : class where T1 : class where T2 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ECCCC<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : class where T1 : class where T2 : class where T3 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_CCCC<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : class where T1 : class where T2 : class where T3 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ECCCCC<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : class where T1 : class where T2 : class where T3 : class where T4 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_CCCCC<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : class where T1 : class where T2 : class where T3 : class where T4 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ECCCCCC<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : class where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_CCCCCC<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : class where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EBC<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_BC<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EBCC<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class where T2 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_BCC<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class where T2 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EBCCC<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_BCCC<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EBCCCC<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class where T4 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_BCCCC<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class where T4 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EBCCCCC<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_BCCCCC<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ESC<T0, T1> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_SC<T0, T1> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ESCC<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class where T2 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_SCC<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class where T2 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ESCCC<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_SCCC<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ESCCCC<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class where T4 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_SCCCC<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class where T4 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ESCCCCC<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_SCCCCC<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EDB<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_DB<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EDBB<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_DBB<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EDBBB<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_DBBB<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EDBBBB<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_DBBBB<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EDBBBBB<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData where T5 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_DBBBBB<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData where T5 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ECB<T0, T1> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_CB<T0, T1> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ECBB<T0, T1, T2> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_CBB<T0, T1, T2> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ECBBB<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_CBBB<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ECBBBB<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_CBBBB<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ECBBBBB<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData where T5 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_CBBBBB<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : class where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData where T5 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_EBB<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_BB<T0, T1> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_EBBB<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_BBB<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_EBBBB<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_BBBB<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_EBBBBB<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_BBBBB<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_EBBBBBB<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData where T5 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_BBBBBB<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, IBufferElementData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData where T5 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_ESB<T0, T1> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1>(EntityQueryBuilder.F_SB<T0, T1> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_ESBB<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2>(EntityQueryBuilder.F_SBB<T0, T1, T2> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_ESBBB<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3>(EntityQueryBuilder.F_SBBB<T0, T1, T2, T3> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_ESBBBB<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4>(EntityQueryBuilder.F_SBBBB<T0, T1, T2, T3, T4> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_ESBBBBB<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData where T5 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

        [System.Obsolete("Call Entities.ForEach() or Entities.With(query).ForEach() instead (RemovedAfter 2019-07-11)")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public unsafe void ForEach<T0, T1, T2, T3, T4, T5>(EntityQueryBuilder.F_SBBBBB<T0, T1, T2, T3, T4, T5> action, EntityQuery query = null)
            where T0 : struct, ISharedComponentData where T1 : struct, IBufferElementData where T2 : struct, IBufferElementData where T3 : struct, IBufferElementData where T4 : struct, IBufferElementData where T5 : struct, IBufferElementData
        {
            var q = Entities;
            if (query != null)
                q = q.With(query);
            q.ForEach(action);
        }

    }

} // namespace Unity.Entities

